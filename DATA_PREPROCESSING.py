# -*- coding: utf-8 -*-
"""Untitled40.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11la9rGHXpvQI9ahhJ9lWvaM_ZJJgI5O7
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('/content/drive/MyDrive/apjakpus.csv', error_bad_lines=False)
data.head(1)

#Karena ada error pada baris 3002, 5002, 7502,
#maka saya hapus aja yg itu.

rows_to_drop = [3002, 5002, 7502]
data = data.drop(rows_to_drop)

#Sekarang saya ambil hanyadata yang dibutuhkan saja yaitu 5 kolom saja, otomatis
#kolom lain terhapus. Kolom tsb merujuk pada kolom cardfeatured_middlesection (lokasi),
#relative (jumlah kamar tidur), relative5 (jumlah kamar mandi), Info (luas bangunan)
#dan Price (harga).

data = data[['cardfeatured_middlesection', 'relative', 'relative5', 'Info', 'Price']]

#Sekarang saya rename dulu nama kolomnya agar mudah dimengerti.

data = data.rename(columns={
    'cardfeatured_middlesection': 'lokasi',
    'relative': 'jumlah_kamar_tidur',
    'relative5': 'jumlah_kamar_mandi',
    'Info': 'luas_bangunan',
    'Price': 'harga'})

data.head(1)

data.info()

#Terlihat terdapat missing values pada semua kolom.
#Saya memilih untuk menghapusnya saja.

data = data.dropna(subset=['lokasi',
                           'jumlah_kamar_tidur',
                           'jumlah_kamar_mandi',
                           'luas_bangunan', 'harga'])

data.info()

data.head(1)

#Skrg kita fokus ke penghapusan simbol m² pada luas bangunan, jd kita hapus (spasi)m²
#setelah angka pada luas bangunan tersebut.

data['luas_bangunan'] = data['luas_bangunan'].str.replace(' m²', '', regex=False)
data.head(1)

data.head(1)

#Nah kemudian kita fokus ke kolom harga, kita akan lakukan beberapa tahap, pertama,
#saya ganti simbol koma menjadi titik. Karena pada bahasa Python
#(yg memang diambil dari metode penulisan bahasa Inggris), titik itu maksudnya koma.
#Tujuannya bahasa Python mengerti codingan maksud kita.

data['harga'] = data['harga'].str.replace(',', '.')
data.head(1)

data.head(1)

#Berikutnya saya juga menghapus Rp(spasi) pada kolom Harga tersebut.

data['harga'] = data['harga'].str.replace('Rp ', '', regex=False)
data.head(1)

data.head(8)

#Kita ubah yang satuan Miliar dan Juta ke bentuk numerik

def convert_harga(harga):
    if 'Triliun' in harga:
        return int(float(harga.replace(' Triliun', '')) * 1e12 )
    elif 'Miliar' in harga:
        return int(float(harga.replace(' Miliar', '')) * 1e9)
    elif 'Juta' in harga:
        return int(float(harga.replace(' Juta', '')) * 1e6)
    else:
        return int(harga)

# Menggunakan fungsi apply untuk mengubah format pada kolom harga
data['harga'] = data['harga'].apply(convert_harga)

# Menampilkan DataFrame hasil
print(data.head(8))

data.dtypes

#Sekarang sy mau ubah semua kolom kecuali kolom lokasi ke bentuk integer.

kolom_integer = ['jumlah_kamar_tidur', 'jumlah_kamar_mandi', 'luas_bangunan', 'harga']
data[kolom_integer] = data[kolom_integer].astype(int)

data.dtypes

#Kita cek deskripsi statistik datanya.
data.describe()

#Nah, pada kolom jumlah kamar tidur terlihat max 99, ini angka yang
#besar sekali dibanding kebanyakan jumlah kamar tidur data ini.
#Oke, kita cek dulu data unik jumlah kamar tidur.

data_unik_kamar_tidur = data['jumlah_kamar_tidur'].unique()
data_unik_kamar_tidur

#Kita coba tampilkan masing2 ada brp banyak per data unik tsb.

jumlah_kt_1 = data['jumlah_kamar_tidur'].value_counts().get(1)
jumlah_kt_2 = data['jumlah_kamar_tidur'].value_counts().get(2)
jumlah_kt_3 = data['jumlah_kamar_tidur'].value_counts().get(3)
jumlah_kt_4 = data['jumlah_kamar_tidur'].value_counts().get(4)
jumlah_kt_5 = data['jumlah_kamar_tidur'].value_counts().get(5)
jumlah_kt_6 = data['jumlah_kamar_tidur'].value_counts().get(6)
jumlah_kt_7 = data['jumlah_kamar_tidur'].value_counts().get(7)
jumlah_kt_10 = data['jumlah_kamar_tidur'].value_counts().get(10)
jumlah_kt_16 = data['jumlah_kamar_tidur'].value_counts().get(16)
jumlah_kt_17 = data['jumlah_kamar_tidur'].value_counts().get(17)
jumlah_kt_20 = data['jumlah_kamar_tidur'].value_counts().get(20)
jumlah_kt_24 = data['jumlah_kamar_tidur'].value_counts().get(24)
jumlah_kt_41 = data['jumlah_kamar_tidur'].value_counts().get(41)
jumlah_kt_99 = data['jumlah_kamar_tidur'].value_counts().get(99)

print('Apartemen yang memiliki jumlah kamar tidur hanya 1 ada', jumlah_kt_1)
print('Apartemen yang memiliki jumlah kamar tidur hanya 2 ada', jumlah_kt_2)
print('Apartemen yang memiliki jumlah kamar tidur 3 ada', jumlah_kt_3)
print('Apartemen yang memiliki jumlah kamar tidur 4 ada', jumlah_kt_4)
print('Apartemen yang memiliki jumlah kamar tidur 5 ada', jumlah_kt_5)
print('Apartemen yang memiliki jumlah kamar tidur 6 ada', jumlah_kt_6)
print('Apartemen yang memiliki jumlah kamar tidur 7 ada', jumlah_kt_7)
print('Apartemen yang memiliki jumlah kamar tidur 10 ada', jumlah_kt_10)
print('Apartemen yang memiliki jumlah kamar tidur 16 ada', jumlah_kt_16)
print('Apartemen yang memiliki jumlah kamar tidur 17 ada', jumlah_kt_17)
print('Apartemen yang memiliki jumlah kamar tidur 20 ada', jumlah_kt_20)
print('Apartemen yang memiliki jumlah kamar tidur 24 ada', jumlah_kt_24)
print('Apartemen yang memiliki jumlah kamar tidur 41 ada', jumlah_kt_41)
print('Apartemen yang memiliki jumlah kamar tidur 99 ada', jumlah_kt_99)

#Karena data jumlah kamar tidur yang di atas 3, maka
#sy hapus aja data jumlah kamar tidur yg di atas 3.

data.drop(data[data['jumlah_kamar_tidur'] > 3].index, inplace=True)

data.describe()

#Terlihat pada deskripsi statistik data, nilai max pada
#kolom jumlah kamar mandi itu 14, nilai ini tentu lumayan
#jauh dari rata2nya ya. Kita cek dulu data uniknya.

data_unik_kamar_mandi = data['jumlah_kamar_mandi'].unique()
data_unik_kamar_mandi

jumlah_km_1 = data['jumlah_kamar_mandi'].value_counts().get(1)
jumlah_km_2 = data['jumlah_kamar_mandi'].value_counts().get(2)
jumlah_km_3 = data['jumlah_kamar_mandi'].value_counts().get(3)
jumlah_km_4 = data['jumlah_kamar_mandi'].value_counts().get(4)
jumlah_km_10 = data['jumlah_kamar_mandi'].value_counts().get(10)
jumlah_km_14 = data['jumlah_kamar_mandi'].value_counts().get(14)

print('Apartemen yang memiliki jumlah kamar mandi hanya 1 ada', jumlah_km_1)
print('Apartemen yang memiliki jumlah kamar mandi hanya 2 ada', jumlah_km_2)
print('Apartemen yang memiliki jumlah kamar mandi 3 ada', jumlah_km_3)
print('Apartemen yang memiliki jumlah kamar mandi 4 ada', jumlah_km_4)
print('Apartemen yang memiliki jumlah kamar mandi 10 ada', jumlah_km_10)
print('Apartemen yang memiliki jumlah kamar mandi 14 ada', jumlah_km_14)

#Karena data yg memiliki jumlah kamar mandi di atas
#3 itu dikit, maka saya hapus aja data tsb.

data.drop(data[data['jumlah_kamar_mandi'] > 3].index, inplace=True)

data.describe()

#Pada deskripsi statistik, terlihat min luas bangunan 3 m², ini menurut sy anomali sih,
#masa luas apartemen cuma segitu doang. Jadi sy memilih untuk hanya menghapus data
#yang luas bangunan dibawah 20 m² aja lah.

data.drop(data[data['luas_bangunan'] < 20].index, inplace=True)

data.describe()

#Pada deskripsi statistik, terlihat bahwa max luas bangunan adalah 1,1 milyar m².
#Bagi saya ini terlihat beda jauh banget sih dari kebanyakan nilai.
#Saya cek dulu upper whisker dan lower whisker luas bangunan.

Q1_lb = data['luas_bangunan'].quantile(0.25)
Q3_lb = data['luas_bangunan'].quantile(0.75)

IQR_lb = Q3_lb - Q1_lb

uw_h = Q3_lb + (1.5 * IQR_lb)
lw_h = Q1_lb - (1.5 * IQR_lb)

print('Upper Whisker untuk kolom luas bangunan adalah', uw_h)
print('Lower Whisker untuk kolom bangunan adalah', lw_h)

#Nah, karena Upper Whisker luas bangunan adalah 187, saya memilih
#untuk membatasi luas bangunan max di 187 m² aja.

data.drop(data[data['luas_bangunan'] > 187].index, inplace=True)

data.describe()

#Pada data deskripsi statistik, terlihat bahwa min harga adalah 4 juta.
#Bagi saya ini anomali, mana ada harga apartemen 4 juta aja?
#Saya memutuskan untuk mengambil data apartemen yg minimal harga 250jt.

data.drop(data[data['harga'] < 250000000].index, inplace=True)

data.describe()

#Pada deskripsi statistik, terlihat max harga 965 milyar.
#Tentu ini nilai yang tinggi banget dibandingkan
#kebanyakan harga apartemen pada data ini. Kita coba
#melihat 10 nilai tertinggi pada kolom harga.

top_10_harga = data.nlargest(10, 'harga')

print(top_10_harga)

#Terlihat top 10 harga tertinggi yaitu 965 milyar, 650 milyar, 126 milyar, 35 milyar, 19 milyar, disusul 175 milyar ada 4 kali,
#kemudian 16 milyar. Nah, sy memutuskan untuk menghapus baris data yang memiliki harga 16 milyar dan di atasnya.

data.drop(data[data['harga'] >= 16000000000].index, inplace=True)

data.describe()

data.reset_index()

#Skrg kita cek data unik lokasi apartemen pada kolom lokasi.

datun_alamat = data['lokasi'].unique()

for alamat_unik in datun_alamat:
  print(alamat_unik)

#Walaupun pada data unik lokasi terdapat >>Glodok, Jakarta Pusat<< dan >>Pinangsia, Jakarta Pusat<<,
#tapi saya akan menghapusya saja, tdk memasukkan kedua lokasi tsb di kecamatan apapun di Jakarta Pusat
#karena saya masih ragu karena setahu saya Glodok dan Pinangsia ada di Jakarta Barat.

data = data.loc[~data['lokasi'].str.contains('Glodok, Jakarta Pusat|Pinangsia, Jakarta Pusat')]

#Skrg kita cek lagi data unik lokasi.

datun_alamat = data['lokasi'].unique()

for alamat_unik in datun_alamat:
  print(alamat_unik)

data.reset_index()

#Sekarang tugas kita memfilter lokasi apartemen tsb berdasarkan kecamatannya.


tanah_abang = data[data['lokasi'].isin([
    'Thamrin, Jakarta Pusat', 'KH Mas Mansyur, Jakarta Pusat', 'Tanah Abang, Jakarta Pusat',
    'Bendungan Hilir, Jakarta Pusat', 'Kebon Melati, Jakarta Pusat', 'Karet Tengsin, Jakarta Pusat',
    'Senayan, Jakarta Pusat', 'Kebon Kacang, Jakarta Pusat', 'Pejompongan, Jakarta Pusat',
    'Wahid Hasyim, Jakarta Pusat'])]

menteng = data[data['lokasi'].isin([
    'Menteng, Jakarta Pusat', 'Kebon Sirih, Jakarta Pusat', 'Cikini, Jakarta Pusat',
    'CBD Area, Jakarta Pusat', 'Menteng Atas, Jakarta Pusat', 'Pegangsaan, Jakarta Pusat'])]

kemayoran = data[data['lokasi'].isin([
    'Kemayoran, Jakarta Pusat', 'Sumur Batu, Jakarta Pusat'])]

sawah_besar = data[data['lokasi'].isin([
    'Pasar Baru, Jakarta Pusat', 'Sawah Besar, Jakarta Pusat', 'Gunung Sahari, Jakarta Pusat',
    'Pangeran Jayakarta, Jakarta Pusat', 'Kartini, Jakarta Pusat', 'Karang Anyar, Jakarta Pusat'])]

cempaka_putih = data[data['lokasi'].isin([
    'Cempaka Putih, Jakarta Pusat', 'Cempaka Mas, Jakarta Pusat'])]

senen = data[data['lokasi'].isin([
    'Senen, Jakarta Pusat', 'Salemba, Jakarta Pusat', 'Bungur, Jakarta Pusat',
    'Percetakan Negara, Jakarta Pusat', 'Kramat, Jakarta Pusat'])]

gambir = data[data['lokasi'].isin([
    'Gajah Mada, Jakarta Pusat', 'Gambir, Jakarta Pusat', 'Harmoni, Jakarta Pusat',
    'Roxy, Jakarta Pusat', 'Batu Ceper, Jakarta Pusat', 'Hayam Wuruk, Jakarta Pusat',
    'Petojo, Jakarta Pusat', 'Hasyim Ashari, Jakarta Pusat'])]

#Sekarang saya membuat variabel baru yaitu kecamatan yg berisi
#nama-nama kecamatan di Jakarta Pusat.

kecamatan = ['tanah_abang', 'menteng','kemayoran', 'sawah_besar','cempaka_putih','senen','gambir']

# #Kita coba buat scatter plot untuk lokasi Tanah Abang.

# plt.figure(figsize=(10, 6))
# plt.scatter(tanah_abang['luas_bangunan'], tanah_abang['harga'], alpha=0.7, c='blue', edgecolors='w')
# plt.title('Scatter Plot Luas Bangunan vs Harga (Tanah Abang, Jakarta Pusat)')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')
# plt.grid(True)

# plt.show()

#Kemungkinan ada outlier pada harga apartemen di Tanah Abang ? Kita cek dulu.

Q1_hta = tanah_abang['harga'].quantile(0.25)
Q3_hta = tanah_abang['harga'].quantile(0.75)

IQR_hta = Q3_hta - Q1_hta

uw_hta = Q3_hta + (1.5 * IQR_hta)
lw_hta = Q1_hta - (1.5 * IQR_hta)

print('Upper Whisker untuk kolom harga apartemen di Tanah Abang adalah', uw_hta)
print('Lower Whisker untuk kolom harga apartemen di Tanah Abang adalah', lw_hta)

#Nah karena upper whisker harga untuk apart di Tanah Abang itu di angka 6,7 milyar,
#maka sy putuskan untuk membuang data apart Tanah Abang yg harganya di atas 6,7 milyar.

tanah_abang.drop(tanah_abang[tanah_abang['harga'] > 6700000000].index, inplace=True)

# #Skrg kita coba cek lg scatter plot untuk apart di Tanah Abang

# plt.figure(figsize=(10, 6))
# plt.scatter(tanah_abang['luas_bangunan'], tanah_abang['harga'], alpha=0.7, c='blue', edgecolors='w')
# plt.title('Scatter Plot Luas Bangunan vs Harga (Tanah Abang, Jakarta Pusat)')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')
# plt.grid(True)

# plt.show()

# #Kita coba buat scatter plot untuk lokasi Menteng.
# plt.figure(figsize=(10, 6))
# plt.scatter(menteng['luas_bangunan'], menteng['harga'], alpha=0.7, c='green', edgecolors='w')
# plt.title('Scatter Plot Luas Bangunan vs Harga (Menteng, Jakarta Pusat)')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')
# plt.grid(True)

# plt.show()

#Karena terlihat pada scatter plot apartemen di menteng ada bbrp harga yg
#jauh beda dari kebanyakan, kemungkinan ada outlier ya. Jadi sy cek dulu.

Q1_hm = menteng['harga'].quantile(0.25)
Q3_hm = menteng['harga'].quantile(0.75)

IQR_hm = Q3_hm - Q1_hm

uw_hm = Q3_hm + (1.5 * IQR_hm)
lw_hm = Q1_hm - (1.5 * IQR_hm)

print('Upper Whisker untuk kolom harga apartemen di Menteng adalah', uw_hm)
print('Lower Whisker untuk kolom harga apartemen di Menteng adalah', lw_hm)

#Nah karena upper whisker harga untuk apart di menteng itu di angka 6,665 milyar,
#maka sy putuskan untuk membuang data apart menteng yg harganya di atas 6,665 milyar.

menteng.drop(menteng[menteng['harga'] > 6650000000].index, inplace=True)

# #Skrg kita coba cek lg scatter plot untuk apart di Menteng

# plt.figure(figsize=(10, 6))
# plt.scatter(menteng['luas_bangunan'], menteng['harga'], alpha=0.7, c='green', edgecolors='w')
# plt.title('Scatter Plot Luas Bangunan vs Harga (Menteng, Jakarta Pusat)')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')
# plt.grid(True)

# plt.show()

# #Kita coba buat scatter plot untuk lokasi Kemayoran.

# plt.figure(figsize=(10, 6))
# plt.scatter(kemayoran['luas_bangunan'], kemayoran['harga'], alpha=0.7, c='orange', edgecolors='w')
# plt.title('Scatter Plot Luas Bangunan vs Harga (Kemayoran, Jakarta Pusat)')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')
# plt.grid(True)

# plt.show()

#Untuk kemayoran, menurut saya grafik scatter plotnya sdh lumayan bagus, jd bagi sy gak perlu membuang outlier.

# #Skrg kita buat scatter plot untuk apart di Sawah Besar.

# plt.figure(figsize=(10, 6))
# plt.scatter(sawah_besar['luas_bangunan'], sawah_besar['harga'], alpha=0.7, c='purple', edgecolors='w')
# plt.title('Scatter Plot Luas Bangunan vs Harga (Sawah Besar, Jakarta Pusat)')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')
# plt.grid(True)

# plt.show()

#Kemungkinan untuk harga apartemen di Sawah Besar memiiki outlier. Kita coba cek dulu.

Q1_sh = sawah_besar['harga'].quantile(0.25)
Q3_sh = sawah_besar['harga'].quantile(0.75)

IQR_sh = Q3_sh - Q1_sh

uw_sh = Q3_sh + (1.5 * IQR_sh)
lw_sh = Q1_sh - (1.5 * IQR_sh)

print('Upper Whisker untuk kolom harga apartemen di Sawah Besar adalah', uw_sh)
print('Lower Whisker untuk kolom harga apartemen di Sawah Besar adalah', lw_sh)

#Karena uuper whisker harga apart di Sawah Besar di angka 1,4 milyar, maka
#saya batasi harga apart di Sawah Besar di angka 1,4 milyar aja.

sawah_besar.drop(sawah_besar[sawah_besar['harga'] > 1400000000].index, inplace=True)

# #Kita cek lg scatter plot di Sawah Besar

# plt.figure(figsize=(10, 6))
# plt.scatter(sawah_besar['luas_bangunan'], sawah_besar['harga'], alpha=0.7, c='purple', edgecolors='w')
# plt.title('Scatter Plot Luas Bangunan vs Harga (Sawah Besar, Jakarta Pusat)')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')
# plt.grid(True)

# plt.show()

# #Skrg kt cek lg scatter plot untuk lokasi Sawah Besar

# plt.figure(figsize=(10, 6))
# plt.scatter(sawah_besar['luas_bangunan'], sawah_besar['harga'], alpha=0.7, c='purple', edgecolors='w')
# plt.title('Scatter Plot Luas Bangunan vs Harga (Sawah Besar, Jakarta Pusat)')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')
# plt.grid(True)

# plt.show()

# #Skrg kita coba buat scatter plot untuk lokasi Cempaka Putih

# plt.figure(figsize=(10, 6))
# plt.scatter(cempaka_putih['luas_bangunan'], cempaka_putih['harga'], alpha=0.7, c='red', edgecolors='w')
# plt.title('Scatter Plot Luas Bangunan vs Harga (Cempaka Putih, Jakarta Pusat)')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')
# plt.grid(True)

# plt.show()

#Kayaknya ada outlier pada harga apart di Cempaka Putih, kita cek dulu.


Q1_ch = cempaka_putih['harga'].quantile(0.25)
Q3_ch = cempaka_putih['harga'].quantile(0.75)

IQR_ch = Q3_ch - Q1_ch

uw_ch = Q3_ch + (1.5 * IQR_ch)
lw_ch = Q1_ch - (1.5 * IQR_ch)

print('Upper Whisker untuk kolom harga apartemen di Cempaka Putih adalah', uw_ch)
print('Lower Whisker untuk kolom harga apartemen di Cempaka Putih adalah', lw_ch)

#Karena upper whisker apart di Cempaka Putih ada di 2,15 milyar, maka sy
#batasi max harganya disitu aja.

cempaka_putih.drop(cempaka_putih[cempaka_putih['harga'] > 2150000000].index, inplace=True)

# #Kita cek lg scatter plot untuk apart di Cempaka Putih.

# plt.figure(figsize=(10, 6))
# plt.scatter(cempaka_putih['luas_bangunan'], cempaka_putih['harga'], alpha=0.7, c='red', edgecolors='w')
# plt.title('Scatter Plot Luas Bangunan vs Harga (Cempaka Putih, Jakarta Pusat)')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')
# plt.grid(True)

# plt.show()

#Terlihat hanya sedikit apartemen di Cempaka Putih yang luasnya di atas 100,
#maka sy putuskan menghapus saja yg di atas 100.

cempaka_putih.drop(cempaka_putih[cempaka_putih['luas_bangunan'] > 100].index, inplace=True)

# #Kita cek lg scatter plot apart di Cempaka Putih

# plt.figure(figsize=(10, 6))
# plt.scatter(cempaka_putih['luas_bangunan'], cempaka_putih['harga'], alpha=0.7, c='red', edgecolors='w')
# plt.title('Scatter Plot Luas Bangunan vs Harga (Cempaka Putih, Jakarta Pusat)')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')
# plt.grid(True)

# plt.show()

# #Skrg kt coba buat scatter plot untuk lokasi Senen.

# plt.figure(figsize=(10, 6))
# plt.scatter(senen['luas_bangunan'], senen['harga'], alpha=0.7, c='brown', edgecolors='w')
# plt.title('Scatter Plot Luas Bangunan vs Harga (Senen, Jakarta Pusat)')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')
# plt.grid(True)

# plt.show()

#Saya rasa untuk luas bangunan di atas 79 d,i lokasi Senin ini hanya sedikit, polanya kayak
#berantakan banget. Jd sy memutuskan menghapus yg luas bangunannya di atas 79.

senen.drop(senen[senen['luas_bangunan'] > 79  ].index, inplace=True)

# #Nah, kt cek lg scatter plot untuk lokasi Senen

# plt.figure(figsize=(10, 6))
# plt.scatter(senen['luas_bangunan'], senen['harga'], alpha=0.7, c='brown', edgecolors='w')
# plt.title('Scatter Plot Luas Bangunan vs Harga (Senen, Jakarta Pusat)')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')
# plt.grid(True)

# plt.show()

# #Skrg kita coba buat scatter plot untuk lokasi Gambir.

# plt.figure(figsize=(10, 6))
# plt.scatter(gambir['luas_bangunan'], gambir['harga'], alpha=0.7, c='gray', edgecolors='w')
# plt.title('Scatter Plot Luas Bangunan vs Harga (Gambir, Jakarta Pusat)')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')
# plt.grid(True)

# plt.show()

#Kayaknya ada outlier pada harga apart di Gambir, kita cek dulu.


Q1_gh = gambir['harga'].quantile(0.25)
Q3_gh = gambir['harga'].quantile(0.75)

IQR_gh = Q3_gh - Q1_gh

uw_gh = Q3_gh + (1.5 * IQR_gh)
lw_gh = Q1_gh - (1.5 * IQR_gh)

print('Upper Whisker untuk kolom harga apartemen di Gambir adalah', uw_gh)
print('Lower Whisker untuk kolom harga apartemen di Gambir adalah', lw_gh)

#Karena upper whisker kolom harga di Gambir 2,025 milyar, maka sy putuskan
#untuk menghapus data di Gambir yg harganya di atas 2,025 milyar.

gambir.drop(gambir[gambir['harga'] > 2025000000 ].index, inplace=True)

# #Skrg kita cek lg scatter plot untuk lokasi Gambir.

# plt.figure(figsize=(10, 6))
# plt.scatter(gambir['luas_bangunan'], gambir['harga'], alpha=0.7, c='gray', edgecolors='w')
# plt.title('Scatter Plot Luas Bangunan vs Harga (Gambir, Jakarta Pusat)')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')
# plt.grid(True)

# plt.show()

# jumlah_per_kecamatan = [tanah_abang.shape[0], menteng.shape[0], kemayoran.shape[0],
#                         sawah_besar.shape[0], cempaka_putih.shape[0], senen.shape[0], gambir.shape[0]]

# plt.figure(figsize=(25, 10))
# bars = plt.bar(kecamatan, jumlah_per_kecamatan, color='skyblue')
# plt.ylabel('Frekuensi')
# plt.title('Diagram Batang Banyak Apartemen per Kecamatan')

# for bar, jumlah in zip(bars, jumlah_per_kecamatan):
#     plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 10, str(jumlah), ha='center', va='bottom')

# plt.show()

# #Sekarang kt buat scatter plot sekaligus.
# plt.figure(figsize=(16, 8))

# plt.scatter(tanah_abang['luas_bangunan'], tanah_abang['harga'], alpha=0.7, label='Tanah Abang', marker='o')
# plt.scatter(menteng['luas_bangunan'], menteng['harga'], alpha=0.7, label='Menteng', marker='s')
# plt.scatter(kemayoran['luas_bangunan'], kemayoran['harga'], alpha=0.7, label='Kemayoran', marker='^')
# plt.scatter(sawah_besar['luas_bangunan'], sawah_besar['harga'], alpha=0.7, label='Sawah Besar', marker='D')
# plt.scatter(cempaka_putih['luas_bangunan'], cempaka_putih['harga'], alpha=0.7, label='Cempaka Putih', marker='P')
# plt.scatter(senen['luas_bangunan'], senen['harga'], alpha=0.7, label='Senen', marker='X')
# plt.scatter(gambir['luas_bangunan'], gambir['harga'], alpha=0.7, label='Gambir', marker='H')

# plt.title('Scatter Plot Luas Bangunan vs Harga untuk Berbagai Kecamatan Jakarta Pusat')
# plt.xlabel('Luas Bangunan')
# plt.ylabel('Harga')

# plt.legend()
# plt.grid(True)

# plt.show()

# grouped_tanah_abang = tanah_abang.groupby(['jumlah_kamar_tidur', 'jumlah_kamar_mandi'])
# count_properties = grouped_tanah_abang.size().unstack(fill_value=0)
# count_properties.plot(kind='bar', stacked=True, figsize=(10, 6))
# plt.title('Jumlah Properti Apartemen di Tanah Abang Berdasarkan Jumlah Kamar Tidur dan Kamar Mandi')
# plt.xlabel('Jumlah Kamar Tidur')
# plt.ylabel('Jumlah Properti')
# plt.xticks(rotation=0)
# plt.legend(title='Jumlah Kamar Mandi')
# plt.show()

# grouped_menteng = menteng.groupby(['jumlah_kamar_tidur', 'jumlah_kamar_mandi'])

# count_properties = grouped_menteng.size().unstack(fill_value=0)

# count_properties.plot(kind='bar', stacked=True, figsize=(10, 6))
# plt.title('Jumlah Properti Apartemen di Menteng Berdasarkan Jumlah Kamar Tidur dan Kamar Mandi')
# plt.xlabel('Jumlah Kamar Tidur')
# plt.ylabel('Jumlah Properti')
# plt.xticks(rotation=0)
# plt.legend(title='Jumlah Kamar Mandi')
# plt.show()

# grouped_kemayoran = kemayoran.groupby(['jumlah_kamar_tidur', 'jumlah_kamar_mandi'])

# count_properties = grouped_kemayoran.size().unstack(fill_value=0)

# count_properties.plot(kind='bar', stacked=True, figsize=(10, 6))
# plt.title('Jumlah Properti Apartemen di Kemayoran Berdasarkan Jumlah Kamar Tidur dan Kamar Mandi')
# plt.xlabel('Jumlah Kamar Tidur')
# plt.ylabel('Jumlah Properti')
# plt.xticks(rotation=0)
# plt.legend(title='Jumlah Kamar Mandi')
# plt.show()

# grouped_sawah_besar = sawah_besar.groupby(['jumlah_kamar_tidur', 'jumlah_kamar_mandi'])

# count_properties = grouped_sawah_besar.size().unstack(fill_value=0)

# count_properties.plot(kind='bar', stacked=True, figsize=(10, 6))
# plt.title('Jumlah Properti Apartemen di Sawah Besar Berdasarkan Jumlah Kamar Tidur dan Kamar Mandi')
# plt.xlabel('Jumlah Kamar Tidur')
# plt.ylabel('Jumlah Properti')
# plt.xticks(rotation=0)
# plt.legend(title='Jumlah Kamar Mandi')
# plt.show()

# grouped_cempaka_putih = cempaka_putih.groupby(['jumlah_kamar_tidur', 'jumlah_kamar_mandi'])

# count_properties = grouped_cempaka_putih.size().unstack(fill_value=0)

# count_properties.plot(kind='bar', stacked=True, figsize=(10, 6))
# plt.title('Jumlah Properti Apartemen di Cempaka Putih Berdasarkan Jumlah Kamar Tidur dan Kamar Mandi')
# plt.xlabel('Jumlah Kamar Tidur')
# plt.ylabel('Jumlah Properti')
# plt.xticks(rotation=0)
# plt.legend(title='Jumlah Kamar Mandi')
# plt.show()

# grouped_senen = senen.groupby(['jumlah_kamar_tidur', 'jumlah_kamar_mandi'])

# count_properties = grouped_senen.size().unstack(fill_value=0)

# count_properties.plot(kind='bar', stacked=True, figsize=(10, 6))
# plt.title('Jumlah Properti Apartemen di Senen Berdasarkan Jumlah Kamar Tidur dan Kamar Mandi')
# plt.xlabel('Jumlah Kamar Tidur')
# plt.ylabel('Jumlah Properti')
# plt.xticks(rotation=0)
# plt.legend(title='Jumlah Kamar Mandi')
# plt.show()

# grouped_gambir = gambir.groupby(['jumlah_kamar_tidur', 'jumlah_kamar_mandi'])

# count_properties = grouped_gambir.size().unstack(fill_value=0)

# count_properties.plot(kind='bar', stacked=True, figsize=(10, 6))
# plt.title('Jumlah Properti Apartemen di Gambir Berdasarkan Jumlah Kamar Tidur dan Kamar Mandi')
# plt.xlabel('Jumlah Kamar Tidur')
# plt.ylabel('Jumlah Properti')
# plt.xticks(rotation=0)
# plt.legend(title='Jumlah Kamar Mandi')
# plt.show()

# import pandas as pd
# import numpy as np
# from sklearn.model_selection import train_test_split
# from sklearn.linear_model import LinearRegression
# from sklearn.ensemble import RandomForestRegressor
# from sklearn.model_selection import GridSearchCV
# from sklearn.metrics import mean_squared_error, mean_absolute_error

# # Kita pisahkan feature dan targetnya
# X = gambir[['jumlah_kamar_tidur', 'jumlah_kamar_mandi', 'luas_bangunan']]
# y = gambir['harga']

# #Split data menjadi training data dan test data
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# # Metode 1: Regresi Linear
# linear_model = LinearRegression()
# linear_model.fit(X_train, y_train)
# #Prediksi untuk training data
# linear_predictions_train = linear_model.predict(X_train)
# linear_mae_train = mean_absolute_error(y_train, linear_predictions_train)
# linear_mape_train = np.mean(np.abs((y_train - linear_predictions_train) / y_train)) * 100
# #Prediksi untuk test data
# linear_predictions_test = linear_model.predict(X_test)
# linear_mae_test = mean_absolute_error(y_test, linear_predictions_test)
# linear_mape_test = np.mean(np.abs((y_test - linear_predictions_test) / y_test)) * 100
# # Skor akurasi Regresi Linear
# linear_score_train = linear_model.score(X_train, y_train)
# linear_score_test = linear_model.score(X_test, y_test)
# #Print keterangan hasil evaluasi untuk regresi linear
# print("Regresi Linear MAE (Training Data):", linear_mae_train)
# print("Regresi Linear MAPE (Training Data):", linear_mape_train)
# print("Regresi Linear MAE (Test Data):", linear_mae_test)
# print("Regresi Linear MAPE (Test Data):", linear_mape_test)
# print("Regresi Linear Score (Training Data):", linear_score_train)
# print("Regresi Linear Score (Test Data):", linear_score_test)
# print('')

# # Metode 2: Random Forest
# rf_model = RandomForestRegressor(random_state=42)
# rf_model.fit(X_train, y_train)

# #Prediksi untuk training data
# rf_predictions_train = rf_model.predict(X_train)
# rf_mae_train = mean_absolute_error(y_train, rf_predictions_train)
# rf_mape_train = np.mean(np.abs((y_train - rf_predictions_train) / y_train)) * 100

# #Prediksi untuk test data
# rf_predictions_test = rf_model.predict(X_test)
# rf_mae_test = mean_absolute_error(y_test, rf_predictions_test)
# rf_mape_test = np.mean(np.abs((y_test - rf_predictions_test) / y_test)) * 100

# #Skor akurasi untuk Random Forest
# rf_score_train = rf_model.score(X_train, y_train)
# rf_score_test = rf_model.score(X_test, y_test)

# #Print keterangan hasil evaluasi Random Forest
# print("Random Forest MAE (Training Data):", rf_mae_train)
# print("Random Forest MAPE (Training Data):", rf_mape_train)
# print("Random Forest MAE (Test Data):", rf_mae_test)
# print("Random Forest MAPE (Test Data):", rf_mape_test)
# print("Random Forest Score (Training Data):", rf_score_train)
# print("Random Forest Score (Test Data):", rf_score_test)
# print('')

# # Metode 3: Grid Search dengan Cross-Validation
# param_grid = {
#     'n_estimators': [50, 100, 150],
#     'max_depth': [None, 10, 20],
#     'min_samples_split': [2, 5, 10]
# }

# grid_search = GridSearchCV(RandomForestRegressor(random_state=42), param_grid, cv=5, scoring='neg_mean_squared_error')
# grid_search.fit(X_train, y_train)

# #Prediksi untuk training data
# grid_predictions_train = grid_search.best_estimator_.predict(X_train)
# grid_mae_train = mean_absolute_error(y_train, grid_predictions_train)
# grid_mape_train = np.mean(np.abs((y_train - grid_predictions_train) / y_train)) * 100

# #Prediksi untuk test data
# grid_predictions_test = grid_search.best_estimator_.predict(X_test)
# grid_mae_test = mean_absolute_error(y_test, grid_predictions_test)
# grid_mape_test = np.mean(np.abs((y_test - grid_predictions_test) / y_test)) * 100

# #Skor untuk Grid Search dengan Cross-Validation
# grid_score_train = grid_search.best_estimator_.score(X_train, y_train)
# grid_score_test = grid_search.best_estimator_.score(X_test, y_test)

# #Print keterangan hasil evaluasi untuk Grid Search dengan Cross-Validation
# print("Grid Search MAE (Training Data):", grid_mae_train)
# print("Grid Search MAPE (Training Data):", grid_mape_train)
# print("Grid Search MAE (Test Data):", grid_mae_test)
# print("Grid Search MAPE (Test Data):", grid_mape_test)
# print("Grid Search Score (Training Data):", grid_score_train)
# print("Grid Search Score (Test Data):", grid_score_test)

tanah_abang.to_csv('tanah_abang.csv', index=False)

menteng.to_csv('menteng.csv', index=False)

kemayoran.to_csv('kemayoran.csv', index=False)

cempaka_putih.to_csv('cempaka_putih.csv', index=False)

senen.to_csv('senen.csv', index=False)

gambir.to_csv('gambir.csv', index=False)